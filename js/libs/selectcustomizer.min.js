"use strict";
var selectDefaultLimit = 15;

function customizeSelectsObject(object, attribuites) {
  var mySelect = [];
  object.each(function (index, item) {
    mySelect[index] = customizeSelect(this, attribuites);
  });

  return mySelect;
}

function customizeSelect(self, attribuites) {
  var vm = this;
  // console.log(attribuites);
  // alert();
  if (typeof attribuites == "undefined") attribuites = {};
  if (typeof attribuites.display == "undefined") attribuites.display = "table-cell";
  if (typeof attribuites.align == "undefined") attribuites.align = "middle";
  if (typeof attribuites.height == "undefined") attribuites.height = "inherit";
  if (typeof attribuites.filter == "undefined") attribuites.filter = false;

  /* NOTE: all events, you can add more events here */
  vm.event = {
    click: attribuites.onClick || function () {},
    listCLick: attribuites.listCLick || function () {},
    attribuites: attribuites,
  };

  /* NOTE: call back event function */
  vm.options = function (options, callback) {
    if (vm.event[options] && typeof callback == "function") {
      vm.event[options] = callback;
    }
  };

  // Cache the number of options
  var $this = $(self),
    numberOfOptions = $(self).children("option").length;

  var isSelectDisabled = $this.attr("disabled") == "disabled";

  // Hides the select element
  $this.addClass("s-hidden");

  // Wrap the select element in a div
  $this.wrap('<div class="select"></div>');

  // Insert a styled div to sit over the top of the hidden select element
  $this.after('<div class="styledSelect"></div>');

  // Cache the styled div
  var $styledSelect = $this.next("div.styledSelect");
  if (isSelectDisabled) {
    $styledSelect.css("color", "grey");
  }

  // Show the first select option in the styled div
  var selectContent =
    $this.find("[selected]").length == 0 ? $this.children("option").eq(0).html() : $this.find("[selected]").html();
  $styledSelect.html(
    (attribuites.filter ? '<input class="input-item" type="text"/> <div class="input-text"' : "<div ") +
      'style="height: ' +
      attribuites.height +
      ";vertical-align: " +
      attribuites.align +
      "; display: " +
      attribuites.display +
      ';">' +
      selectContent +
      "</div>"
  );

  // Insert an unordered list after the styled div and also cache the list
  var $list = $("<ul />", {
    class: "options",
  }).insertAfter($styledSelect);

  // Insert a list item into the unordered list for each select option
  for (var i = 0; i < numberOfOptions; i++) {
    $("<li />", {
      html:
        '<div style="height: ' +
        attribuites.height +
        ";vertical-align: " +
        attribuites.align +
        "; display: " +
        attribuites.display +
        ';">' +
        $this.children("option").eq(i).html() +
        "</div>",
      rel: $this.children("option").eq(i).val(),
    })
      .appendTo($list)
      .on("click", function () {
        var parent = $(this).parent();
        parent.find("li").removeClass("selected");
        $styledSelect.find("input").val("");
        $(".select .options li").removeAttr("style");
        $(this).addClass("selected");
      });
  }

  // Cache the list items
  var $listItems = $list.children("li");

  // Show the unordered list when the styled div is clicked (also hides it if the div is clicked again)
  $styledSelect.click(function (e) {
    if ($(this).find("input").is(":visible") && attribuites.filter) return false;
    if (!isSelectDisabled) {
      if ($list.css("display") != "none") {
        $styledSelect.removeClass("active");
        $list.hide();
      } else {
        e.stopPropagation();
        $("div.styledSelect.active").each(function () {
          $(this).removeClass("active").next("ul.options").hide();
        });
        $(this).toggleClass("active").next("ul.options").toggle();
      }
      // $(this).find("input").val($(this).find(".input-text").text());
    }

    vm.event.click();
    $(this).find("input").focus();
  });

  $styledSelect.find("input").on("keyup", function (event) {
    $(this)
      .parents(".select")
      .find(".options li")
      .each(function (index, elem) {
        if (!$(elem).text().toLowerCase().startsWith($(event.target).val().toLowerCase(), 0)) {
          $(elem).hide();
        } else {
          $(elem).show();
        }
      });
  });

  // Hides the unordered list when a list item is clicked and updates the styled div to show the selected list item
  // Updates the select element to have the value of the equivalent option
  $listItems.click(function (e) {
    if ($(this).attr("locked") != "locked") {
      e.stopPropagation();
      if (attribuites.filter) {
        $styledSelect.removeClass("active");
        $styledSelect.find(".input-text").html($(this).html());
      } else {
        $styledSelect.html($(this).html()).removeClass("active");
      }
      $this.val($(this).attr("rel")).change();
      $styledSelect.find("input").val("");
      $(".select .options li").removeAttr("style");
      $list.hide();
    }

    vm.event.listCLick();
    /* alert($this.val()); Uncomment this for demonstration! */
  });

  // Hides the unordered list when clicking outside of it
  $(document).click(function () {
    $styledSelect.removeClass("active");
    $styledSelect.find("input").val("");
    $(".select .options li").removeAttr("style");
    $list.hide();
  });

  return vm;
}

function updateCustomSelect(object, attribuites) {
  object.removeClass("s-hidden");
  object.each(function (i, e) {
    $(e).parents(".lang").append($(e));
    $(e).parents(".lang").find(".select").remove();
  });
  $(".page select").find(".styledSelect").remove();
  $(".page select").find(".options").remove();
  return customizeSelectsObject(object, attribuites);
}
